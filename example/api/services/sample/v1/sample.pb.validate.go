// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: listify/services/sample/v1/sample.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _sample_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetWidgetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWidgetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWidgetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWidgetRequestMultiError, or nil if none found.
func (m *GetWidgetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWidgetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetWidgetRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWidgetRequestMultiError(errors)
	}

	return nil
}

func (m *GetWidgetRequest) _validateUuid(uuid string) error {
	if matched := _sample_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetWidgetRequestMultiError is an error wrapping multiple validation errors
// returned by GetWidgetRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWidgetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWidgetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWidgetRequestMultiError) AllErrors() []error { return m }

// GetWidgetRequestValidationError is the validation error returned by
// GetWidgetRequest.Validate if the designated constraints aren't met.
type GetWidgetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWidgetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWidgetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWidgetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWidgetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWidgetRequestValidationError) ErrorName() string { return "GetWidgetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWidgetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWidgetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWidgetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWidgetRequestValidationError{}

// Validate checks the field values on GetWidgetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWidgetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWidgetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWidgetResponseMultiError, or nil if none found.
func (m *GetWidgetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWidgetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWidget() == nil {
		err := GetWidgetResponseValidationError{
			field:  "Widget",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWidget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWidgetResponseValidationError{
					field:  "Widget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWidgetResponseValidationError{
					field:  "Widget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWidget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWidgetResponseValidationError{
				field:  "Widget",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWidgetResponseMultiError(errors)
	}

	return nil
}

// GetWidgetResponseMultiError is an error wrapping multiple validation errors
// returned by GetWidgetResponse.ValidateAll() if the designated constraints
// aren't met.
type GetWidgetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWidgetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWidgetResponseMultiError) AllErrors() []error { return m }

// GetWidgetResponseValidationError is the validation error returned by
// GetWidgetResponse.Validate if the designated constraints aren't met.
type GetWidgetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWidgetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWidgetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWidgetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWidgetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWidgetResponseValidationError) ErrorName() string {
	return "GetWidgetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWidgetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWidgetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWidgetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWidgetResponseValidationError{}

// Validate checks the field values on Widget with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Widget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Widget with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WidgetMultiError, or nil if none found.
func (m *Widget) ValidateAll() error {
	return m.validate(true)
}

func (m *Widget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WidgetValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCustomerId()); err != nil {
		err = WidgetValidationError{
			field:  "CustomerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDetails() == nil {
		err := WidgetValidationError{
			field:  "Details",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WidgetValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WidgetValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WidgetValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Widget_Status_NotInLookup[m.GetStatus()]; ok {
		err := WidgetValidationError{
			field:  "Status",
			reason: "value must not be in list [WIDGET_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := WidgetStatus_name[int32(m.GetStatus())]; !ok {
		err := WidgetValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreated() == nil {
		err := WidgetValidationError{
			field:  "Created",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WidgetMultiError(errors)
	}

	return nil
}

func (m *Widget) _validateUuid(uuid string) error {
	if matched := _sample_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WidgetMultiError is an error wrapping multiple validation errors returned by
// Widget.ValidateAll() if the designated constraints aren't met.
type WidgetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetMultiError) AllErrors() []error { return m }

// WidgetValidationError is the validation error returned by Widget.Validate if
// the designated constraints aren't met.
type WidgetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetValidationError) ErrorName() string { return "WidgetValidationError" }

// Error satisfies the builtin error interface
func (e WidgetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetValidationError{}

var _Widget_Status_NotInLookup = map[WidgetStatus]struct{}{
	0: {},
}

// Validate checks the field values on WidgetDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WidgetDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WidgetDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WidgetDetailsMultiError, or
// nil if none found.
func (m *WidgetDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *WidgetDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := WidgetDetailsValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := WidgetDetailsValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Special

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *WidgetDetails_Square:
		if v == nil {
			err := WidgetDetailsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetSquare()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WidgetDetailsValidationError{
						field:  "Square",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WidgetDetailsValidationError{
						field:  "Square",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSquare()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WidgetDetailsValidationError{
					field:  "Square",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WidgetDetails_Round:
		if v == nil {
			err := WidgetDetailsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetRound()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WidgetDetailsValidationError{
						field:  "Round",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WidgetDetailsValidationError{
						field:  "Round",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRound()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WidgetDetailsValidationError{
					field:  "Round",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := WidgetDetailsValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WidgetDetailsMultiError(errors)
	}

	return nil
}

// WidgetDetailsMultiError is an error wrapping multiple validation errors
// returned by WidgetDetails.ValidateAll() if the designated constraints
// aren't met.
type WidgetDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetDetailsMultiError) AllErrors() []error { return m }

// WidgetDetailsValidationError is the validation error returned by
// WidgetDetails.Validate if the designated constraints aren't met.
type WidgetDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetDetailsValidationError) ErrorName() string { return "WidgetDetailsValidationError" }

// Error satisfies the builtin error interface
func (e WidgetDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidgetDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetDetailsValidationError{}

// Validate checks the field values on SquareWidget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SquareWidget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SquareWidget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SquareWidgetMultiError, or
// nil if none found.
func (m *SquareWidget) ValidateAll() error {
	return m.validate(true)
}

func (m *SquareWidget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWidth() <= 0 {
		err := SquareWidgetValidationError{
			field:  "Width",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHeight() <= 0 {
		err := SquareWidgetValidationError{
			field:  "Height",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SquareWidgetMultiError(errors)
	}

	return nil
}

// SquareWidgetMultiError is an error wrapping multiple validation errors
// returned by SquareWidget.ValidateAll() if the designated constraints aren't met.
type SquareWidgetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SquareWidgetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SquareWidgetMultiError) AllErrors() []error { return m }

// SquareWidgetValidationError is the validation error returned by
// SquareWidget.Validate if the designated constraints aren't met.
type SquareWidgetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SquareWidgetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SquareWidgetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SquareWidgetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SquareWidgetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SquareWidgetValidationError) ErrorName() string { return "SquareWidgetValidationError" }

// Error satisfies the builtin error interface
func (e SquareWidgetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSquareWidget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SquareWidgetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SquareWidgetValidationError{}

// Validate checks the field values on RoundWidget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoundWidget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoundWidget with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoundWidgetMultiError, or
// nil if none found.
func (m *RoundWidget) ValidateAll() error {
	return m.validate(true)
}

func (m *RoundWidget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDiameter() <= 0 {
		err := RoundWidgetValidationError{
			field:  "Diameter",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoundWidgetMultiError(errors)
	}

	return nil
}

// RoundWidgetMultiError is an error wrapping multiple validation errors
// returned by RoundWidget.ValidateAll() if the designated constraints aren't met.
type RoundWidgetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoundWidgetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoundWidgetMultiError) AllErrors() []error { return m }

// RoundWidgetValidationError is the validation error returned by
// RoundWidget.Validate if the designated constraints aren't met.
type RoundWidgetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoundWidgetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoundWidgetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoundWidgetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoundWidgetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoundWidgetValidationError) ErrorName() string { return "RoundWidgetValidationError" }

// Error satisfies the builtin error interface
func (e RoundWidgetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoundWidget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoundWidgetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoundWidgetValidationError{}

// Validate checks the field values on ListWidgetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWidgetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWidgetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWidgetsRequestMultiError, or nil if none found.
func (m *ListWidgetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWidgetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if all {
		switch v := interface{}(m.GetSearch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWidgetsRequestValidationError{
					field:  "Search",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWidgetsRequestValidationError{
					field:  "Search",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWidgetsRequestValidationError{
				field:  "Search",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWidgetsRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWidgetsRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWidgetsRequestValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWidgetsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWidgetsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWidgetsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWidgetsRequestMultiError(errors)
	}

	return nil
}

// ListWidgetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListWidgetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWidgetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWidgetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWidgetsRequestMultiError) AllErrors() []error { return m }

// ListWidgetsRequestValidationError is the validation error returned by
// ListWidgetsRequest.Validate if the designated constraints aren't met.
type ListWidgetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWidgetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWidgetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWidgetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWidgetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWidgetsRequestValidationError) ErrorName() string {
	return "ListWidgetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWidgetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWidgetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWidgetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWidgetsRequestValidationError{}

// Validate checks the field values on ListWidgetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWidgetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWidgetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWidgetsResponseMultiError, or nil if none found.
func (m *ListWidgetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWidgetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWidgets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWidgetsResponseValidationError{
						field:  fmt.Sprintf("Widgets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWidgetsResponseValidationError{
						field:  fmt.Sprintf("Widgets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWidgetsResponseValidationError{
					field:  fmt.Sprintf("Widgets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWidgetsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWidgetsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWidgetsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWidgetsResponseMultiError(errors)
	}

	return nil
}

// ListWidgetsResponseMultiError is an error wrapping multiple validation
// errors returned by ListWidgetsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWidgetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWidgetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWidgetsResponseMultiError) AllErrors() []error { return m }

// ListWidgetsResponseValidationError is the validation error returned by
// ListWidgetsResponse.Validate if the designated constraints aren't met.
type ListWidgetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWidgetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWidgetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWidgetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWidgetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWidgetsResponseValidationError) ErrorName() string {
	return "ListWidgetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWidgetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWidgetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWidgetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWidgetsResponseValidationError{}
