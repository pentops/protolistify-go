// Code generated by protoc-gen-listify. DO NOT EDIT.

package sspb

import (
	errors "errors"
	fmt "fmt"
	v1 "github.com/pentops/protoc-gen-listify/listify/v1"
	regexp "regexp"
	strconv "strconv"
	time "time"
)

var (
	ErrFilterValidationInvalidField              = errors.New("invalid field name(s) for filter")
	ErrFilterValidationInvalidRangeMinMaxMissing = errors.New("invalid range min and/or max must be provided")
	ErrFilterValidationInvalidRangeMinMax        = errors.New("invalid range min/max")
	ErrFilterValidationInvalidRangeType          = errors.New("invalid type for range")
	ErrFilterValidationInvalidValue              = errors.New("invalid value(s) for filter")

	uuidMatch = regexp.MustCompile("(?i)^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
	dateMatch = regexp.MustCompile("^([0-9]{4}-?([0-9]{2})?-?([0-9]{2})?)$")
)

func ListifyFilter_ValidDouble(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetDouble()
		if r == nil {
			return fmt.Errorf("%w: expected double", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseFloat(s, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidFloat(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetFloat()
		if r == nil {
			return fmt.Errorf("%w: expected float", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseFloat(s, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidInt32(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetInt32()
		if r == nil {
			return fmt.Errorf("%w: expected int32", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidSint32(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetSint32()
		if r == nil {
			return fmt.Errorf("%w: expected sint32", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidSfixed32(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetSfixed32()
		if r == nil {
			return fmt.Errorf("%w: expected sfixed32", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidInt64(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetInt64()
		if r == nil {
			return fmt.Errorf("%w: expected int64", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidSint64(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetSint64()
		if r == nil {
			return fmt.Errorf("%w: expected sint64", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidSfixed64(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetSfixed64()
		if r == nil {
			return fmt.Errorf("%w: expected sfixed64", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidUint32(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetUint32()
		if r == nil {
			return fmt.Errorf("%w: expected uint32", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseUint(s, 10, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidFixed32(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetFixed32()
		if r == nil {
			return fmt.Errorf("%w: expected fixed32", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseUint(s, 10, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidUint64(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetUint64()
		if r == nil {
			return fmt.Errorf("%w: expected uint64", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseUint(s, 10, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidFixed64(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetFixed64()
		if r == nil {
			return fmt.Errorf("%w: expected fixed64", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.Value > r.Max.Value {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseUint(s, 10, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidBool(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	s := f.GetValue()
	_, err := strconv.ParseBool(s)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}
	return nil
}

func ListifyFilter_ValidUniqueString(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	return nil
}

func ListifyFilter_ValidUUID(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	if !uuidMatch.MatchString(f.GetValue()) {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
	}

	return nil
}

func ListifyFilter_ValidDate(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetDate()
		if r == nil {
			return fmt.Errorf("%w: expected date", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		return nil
	}

	if !dateMatch.MatchString(f.GetValue()) {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
	}

	return nil
}

func ListifyFilter_ValidTimestamp(f *v1.Filter) error {
	if f.GetRange() != nil {
		r := f.GetRange().GetTimestamp()
		if r == nil {
			return fmt.Errorf("%w: expected timestamp", ErrFilterValidationInvalidRangeType)
		}

		if r.Min == nil && r.Max == nil {
			return ErrFilterValidationInvalidRangeMinMaxMissing
		}

		if r.Min != nil && r.Max != nil && r.Min.AsTime().After(r.Max.AsTime()) {
			return ErrFilterValidationInvalidRangeMinMax
		}

		return nil
	}

	_, err := time.Parse(time.RFC3339, f.GetValue())
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
	}

	return nil
}

func (r *SquareWidget) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"width":  ListifyFilter_ValidInt64,
		"height": ListifyFilter_ValidInt64,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func (r *RoundWidget) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"diameter": ListifyFilter_ValidInt64,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func WidgetDetails_ValidType(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	switch f.GetValue() {
	case "SquareWidget":
		return nil
	case "RoundWidget":
		return nil
	}

	return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
}

func (r *WidgetDetails) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"width":    ListifyFilter_ValidInt64,
		"height":   ListifyFilter_ValidInt64,
		"diameter": ListifyFilter_ValidInt64,
		"type":     WidgetDetails_ValidType,
		"weight":   ListifyFilter_ValidInt64,
		"special":  ListifyFilter_ValidBool,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func Widget_ValidStatus(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	switch f.GetValue() {
	case "WIDGET_STATUS_UNSPECIFIED":
		return nil
	case "WIDGET_STATUS_REQUESTED":
		return nil
	case "WIDGET_STATUS_CREATED":
		return nil
	}

	return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
}

func (r *Widget) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"diameter":    ListifyFilter_ValidInt64,
		"type":        WidgetDetails_ValidType,
		"weight":      ListifyFilter_ValidInt64,
		"special":     ListifyFilter_ValidBool,
		"status":      Widget_ValidStatus,
		"created":     ListifyFilter_ValidTimestamp,
		"customer_id": ListifyFilter_ValidUUID,
		"width":       ListifyFilter_ValidInt64,
		"height":      ListifyFilter_ValidInt64,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func (r *ListWidgetsRequest) ValidateFilters() error {
	validFilters := map[string]func(*v1.Filter) error{
		"special":     ListifyFilter_ValidBool,
		"status":      Widget_ValidStatus,
		"diameter":    ListifyFilter_ValidInt64,
		"customer_id": ListifyFilter_ValidUUID,
		"height":      ListifyFilter_ValidInt64,
		"created":     ListifyFilter_ValidTimestamp,
		"type":        WidgetDetails_ValidType,
		"weight":      ListifyFilter_ValidInt64,
		"width":       ListifyFilter_ValidInt64,
	}

	failedFilters := []string{}

	for _, filter := range r.Filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func (r *ListWidgetsRequest) FilterStatements() ([]string, []interface{}, error) {
	return r.FilterStatementsWithOrdinal(1)
}

func (r *ListWidgetsRequest) FilterStatementsWithOrdinal(startingOrdinal int) ([]string, []interface{}, error) {
	var statements []string
	var args []interface{}

	ordinal := startingOrdinal
	for _, filter := range r.Filters {
		if filter.GetRange() != nil {
			switch r := filter.GetRange().GetType().(type) {
			case *v1.Range_Double:
				if r.Double.Min != nil && r.Double.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Double.Min.Value, r.Double.Max.Value)
					ordinal += 2
				} else {
					if r.Double.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Double.Min.Value)
						ordinal++
					}
					if r.Double.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Double.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Fixed32:
				if r.Fixed32.Min != nil && r.Fixed32.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Fixed32.Min.Value, r.Fixed32.Max.Value)
					ordinal += 2
				} else {
					if r.Fixed32.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Fixed32.Min.Value)
						ordinal++
					}
					if r.Fixed32.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Fixed32.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Fixed64:
				if r.Fixed64.Min != nil && r.Fixed64.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Fixed64.Min.Value, r.Fixed64.Max.Value)
					ordinal += 2
				} else {
					if r.Fixed64.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Fixed64.Min.Value)
						ordinal++
					}
					if r.Fixed64.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Fixed64.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Float:
				if r.Float.Min != nil && r.Float.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Float.Min.Value, r.Float.Max.Value)
					ordinal += 2
				} else {
					if r.Float.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Float.Min.Value)
						ordinal++
					}
					if r.Float.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Float.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Int32:
				if r.Int32.Min != nil && r.Int32.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Int32.Min.Value, r.Int32.Max.Value)
					ordinal += 2
				} else {
					if r.Int32.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Int32.Min.Value)
						ordinal++
					}
					if r.Int32.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Int32.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Int64:
				if r.Int64.Min != nil && r.Int64.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Int64.Min.Value, r.Int64.Max.Value)
					ordinal += 2
				} else {
					if r.Int64.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Int64.Min.Value)
						ordinal++
					}
					if r.Int64.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Int64.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Sfixed32:
				if r.Sfixed32.Min != nil && r.Sfixed32.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Sfixed32.Min.Value, r.Sfixed32.Max.Value)
					ordinal += 2
				} else {
					if r.Sfixed32.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Sfixed32.Min.Value)
						ordinal++
					}
					if r.Sfixed32.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Sfixed32.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Sfixed64:
				if r.Sfixed64.Min != nil && r.Sfixed64.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Sfixed64.Min.Value, r.Sfixed64.Max.Value)
					ordinal += 2
				} else {
					if r.Sfixed64.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Sfixed64.Min.Value)
						ordinal++
					}
					if r.Sfixed64.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Sfixed64.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Sint32:
				if r.Sint32.Min != nil && r.Sint32.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Sint32.Min.Value, r.Sint32.Max.Value)
					ordinal += 2
				} else {
					if r.Sint32.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Sint32.Min.Value)
						ordinal++
					}
					if r.Sint32.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Sint32.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Sint64:
				if r.Sint64.Min != nil && r.Sint64.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Sint64.Min.Value, r.Sint64.Max.Value)
					ordinal += 2
				} else {
					if r.Sint64.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Sint64.Min.Value)
						ordinal++
					}
					if r.Sint64.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Sint64.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Uint32:
				if r.Uint32.Min != nil && r.Uint32.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Uint32.Min.Value, r.Uint32.Max.Value)
					ordinal += 2
				} else {
					if r.Uint32.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Uint32.Min.Value)
						ordinal++
					}
					if r.Uint32.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Uint32.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Uint64:
				if r.Uint64.Min != nil && r.Uint64.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Uint64.Min.Value, r.Uint64.Max.Value)
					ordinal += 2
				} else {
					if r.Uint64.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Uint64.Min.Value)
						ordinal++
					}
					if r.Uint64.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Uint64.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Date:
				if r.Date.Min != nil && r.Date.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Date.Min.Value, r.Date.Max.Value)
					ordinal += 2
				} else {
					if r.Date.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Date.Min.Value)
						ordinal++
					}
					if r.Date.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Date.Max.Value)
						ordinal++
					}
				}
			case *v1.Range_Timestamp:
				if r.Timestamp.Min != nil && r.Timestamp.Max != nil {
					statements = append(statements, fmt.Sprintf(`%s >= $%d AND %s <= $%d`, filter.Field, ordinal, filter.Field, ordinal+1))
					args = append(args, r.Timestamp.Min.AsTime(), r.Timestamp.Max.AsTime())
					ordinal += 2
				} else {
					if r.Timestamp.Min != nil {
						statements = append(statements, fmt.Sprintf(`%s >= $%d`, filter.Field, ordinal))
						args = append(args, r.Timestamp.Min.AsTime())
						ordinal++
					}
					if r.Timestamp.Max != nil {
						statements = append(statements, fmt.Sprintf(`%s <= $%d`, filter.Field, ordinal))
						args = append(args, r.Timestamp.Max.AsTime())
						ordinal++
					}
				}
			}
		} else {
			statements = append(statements, fmt.Sprintf("%s = $%d", filter.Field, ordinal))
			args = append(args, filter.GetValue())
			ordinal++
		}
	}

	return statements, args, nil
}
