// Code generated by protoc-gen-listify. DO NOT EDIT.

package sspb

import (
	errors "errors"
	fmt "fmt"
	v1 "github.com/pentops/protoc-gen-listify/listify/v1"
	regexp "regexp"
	strconv "strconv"
	time "time"
)

var (
	ErrFilterValidationInvalidField = errors.New("invalid field name(s) for filter")
	ErrFilterValidationInvalidValue = errors.New("invalid value(s) for filter")

	uuidMatch = regexp.MustCompile("(?i)^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
	dateMatch = regexp.MustCompile("^([0-9]{4}-?([0-9]{2})?-?([0-9]{2})?)$")
)

func ListifyFilter_ValidDouble(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseFloat(s, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidFloat(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseFloat(s, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidInt32(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidInt64(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidUint32(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseUint(s, 10, 32)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidUint64(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseUint(s, 10, 64)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}

	return nil
}

func ListifyFilter_ValidBool(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	s := f.GetValue()
	_, err := strconv.ParseBool(s)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, s)
	}
	return nil
}

func ListifyFilter_ValidUniqueString(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	return nil
}

func ListifyFilter_ValidUUID(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	if !uuidMatch.MatchString(f.GetValue()) {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
	}

	return nil
}

func ListifyFilter_ValidDate(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	if !dateMatch.MatchString(f.GetValue()) {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
	}

	return nil
}

func ListifyFilter_ValidTimestamp(f *v1.Filter) error {
	if f.GetRange() != nil {
		return nil
	}

	_, err := time.Parse(time.RFC3339, f.GetValue())
	if err != nil {
		return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
	}

	return nil
}

func (r *SquareWidget) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"height": ListifyFilter_ValidInt64,
		"width":  ListifyFilter_ValidInt64,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func (r *RoundWidget) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"diameter": ListifyFilter_ValidInt64,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func WidgetDetails_ValidType(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	switch f.GetValue() {
	case "SquareWidget":
		return nil
	case "RoundWidget":
		return nil
	}

	return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
}

func (r *WidgetDetails) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"special":  ListifyFilter_ValidBool,
		"width":    ListifyFilter_ValidInt64,
		"height":   ListifyFilter_ValidInt64,
		"diameter": ListifyFilter_ValidInt64,
		"type":     WidgetDetails_ValidType,
		"weight":   ListifyFilter_ValidInt64,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func Widget_ValidStatus(f *v1.Filter) error {
	if f.GetRange() != nil {
		return fmt.Errorf("%w: range", ErrFilterValidationInvalidValue)
	}

	switch f.GetValue() {
	case "WIDGET_STATUS_UNSPECIFIED":
		return nil
	case "WIDGET_STATUS_REQUESTED":
		return nil
	case "WIDGET_STATUS_CREATED":
		return nil
	}

	return fmt.Errorf("%w: %s", ErrFilterValidationInvalidValue, f.GetValue())
}

func (r *Widget) ValidateFilters(filters []*v1.Filter) error {
	validFilters := map[string]func(*v1.Filter) error{
		"customer_id": ListifyFilter_ValidUUID,
		"width":       ListifyFilter_ValidInt64,
		"height":      ListifyFilter_ValidInt64,
		"type":        WidgetDetails_ValidType,
		"weight":      ListifyFilter_ValidInt64,
		"status":      Widget_ValidStatus,
		"special":     ListifyFilter_ValidBool,
		"diameter":    ListifyFilter_ValidInt64,
		"created":     ListifyFilter_ValidTimestamp,
	}

	failedFilters := []string{}

	for _, filter := range filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func (r *ListWidgetsRequest) ValidateFilters() error {
	validFilters := map[string]func(*v1.Filter) error{
		"customer_id": ListifyFilter_ValidUUID,
		"width":       ListifyFilter_ValidInt64,
		"status":      Widget_ValidStatus,
		"created":     ListifyFilter_ValidTimestamp,
		"diameter":    ListifyFilter_ValidInt64,
		"height":      ListifyFilter_ValidInt64,
		"type":        WidgetDetails_ValidType,
		"weight":      ListifyFilter_ValidInt64,
		"special":     ListifyFilter_ValidBool,
	}

	failedFilters := []string{}

	for _, filter := range r.Filters {
		validator, ok := validFilters[filter.Field]
		if !ok {
			failedFilters = append(failedFilters, filter.Field)
			continue
		}

		if err := validator(filter); err != nil {
			failedFilters = append(failedFilters, filter.Field)
		}
	}

	if len(failedFilters) > 0 {
		return fmt.Errorf("%w: %q", ErrFilterValidationInvalidField, failedFilters)
	}

	return nil
}

func (r *ListWidgetsRequest) FiltersToSql() (string, []interface{}, error) {
	return "", nil, nil
}
